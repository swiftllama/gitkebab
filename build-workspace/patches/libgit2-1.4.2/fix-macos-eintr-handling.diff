diff --git a/src/streams/socket.c b/src/streams/socket.c
index 33f7883..7c4c83e 100644
--- a/src/streams/socket.c
+++ b/src/streams/socket.c
@@ -28,6 +28,71 @@
 #	endif
 #endif
 
+#ifndef GIT_WIN32
+/* https://stackoverflow.com/questions/2597608/c-socket-connection-timeout */
+#include <fcntl.h>
+#include <poll.h>
+
+int connect_with_timeout(int sockfd, const struct sockaddr *addr, socklen_t addrlen, unsigned int timeout_ms) {
+    int rc = 0;
+    /* Set O_NONBLOCK */
+    int sockfd_flags_before;
+    if((sockfd_flags_before=fcntl(sockfd,F_GETFL,0)<0)) return -1;
+    if(fcntl(sockfd,F_SETFL,sockfd_flags_before | O_NONBLOCK)<0) return -1;
+    /* Start connecting (asynchronously) */
+    do {
+        if (connect(sockfd, addr, addrlen)<0) {
+            /* Did connect return an error? If so, we'll fail. */
+            if ((errno != EWOULDBLOCK) && (errno != EINPROGRESS)) {
+                rc = -1;
+            }
+            /* Otherwise, we'll wait for it to complete. */
+            else {
+                /* Set a deadline timestamp 'timeout' ms from now (needed b/c poll can be interrupted) */
+                struct timespec now;
+                if(clock_gettime(CLOCK_MONOTONIC, &now)<0) { rc=-1;  break; }
+		printf("DBG E8\n");
+                struct timespec deadline = { .tv_sec = now.tv_sec,
+                                             .tv_nsec = now.tv_nsec + timeout_ms*1000000l};
+                /* Wait for the connection to complete. */
+                do {
+                    /* Calculate how long until the deadline */
+		  if(clock_gettime(CLOCK_MONOTONIC, &now)<0) { rc=-1;break; }
+                    int ms_until_deadline = (int)(  (deadline.tv_sec  - now.tv_sec)*1000l
+                                                  + (deadline.tv_nsec - now.tv_nsec)/1000000l);
+                    if(ms_until_deadline<0) { rc=0; break; }
+                    /* Wait for connect to complete (or for the timeout deadline) */
+                    struct pollfd pfds[] = { { .fd = sockfd, .events = POLLOUT } };
+                    rc = poll(pfds, 1, ms_until_deadline);
+                    /* If poll 'succeeded', make sure it *really* succeeded */
+                    if(rc>0) {
+                        int error = 0; socklen_t len = sizeof(error);
+                        int retval = getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &error, &len);
+                        if(retval==0) errno = error;
+                        if(error!=0) rc=-1;
+                    }
+                }
+                /* If poll was interrupted, try again. */
+                while(rc==-1 && errno==EINTR);
+                /* Did poll timeout? If so, fail. */
+                if(rc==0) {
+                    errno = ETIMEDOUT;
+                    rc=-1;
+                }
+            }
+        }
+    } while(0);
+    /* Restore original O_NONBLOCK state */
+    if(fcntl(sockfd,F_SETFL,sockfd_flags_before)<0) return -1;
+    /* Success */
+    return rc == 1 ? 0 : rc;
+}
+#else
+int connect_with_timeout(int sockfd, const struct sockaddr *addr, socklen_t addrlen, unsigned int timeout_ms) {
+  return connect(sockfd, addr, addrlen);
+}
+#endif
+
 #ifdef GIT_WIN32
 static void net_set_error(const char *str)
 {
@@ -77,6 +142,7 @@ static int socket_connect(git_stream *stream)
 	GIT_SOCKET s = INVALID_SOCKET;
 	int ret;
 
+
 #ifdef GIT_WIN32
 	/* on win32, the WSA context needs to be initialized
 	 * before any socket calls can be performed */
@@ -106,25 +172,25 @@ static int socket_connect(git_stream *stream)
 
 	for (p = info; p != NULL; p = p->ai_next) {
 		s = socket(p->ai_family, p->ai_socktype | SOCK_CLOEXEC, p->ai_protocol);
-
 		if (s == INVALID_SOCKET)
 			continue;
-
+#ifdef __APPLE__
+		if (connect_with_timeout(s, p->ai_addr, (socklen_t)p->ai_addrlen, 30000) == 0)
+		  break;
+#else
 		if (connect(s, p->ai_addr, (socklen_t)p->ai_addrlen) == 0)
 			break;
-
+#endif
 		/* If we can't connect, try the next one */
 		close_socket(s);
 		s = INVALID_SOCKET;
 	}
-
 	/* Oops, we couldn't connect to any address */
 	if (s == INVALID_SOCKET && p == NULL) {
 		git_error_set(GIT_ERROR_OS, "failed to connect to %s", st->host);
 		p_freeaddrinfo(info);
 		return -1;
 	}
-
 	st->s = s;
 	p_freeaddrinfo(info);
 	return 0;
